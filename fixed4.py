import requests
import time
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton
import threading
import asyncio
import re
from datetime import datetime, timedelta
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
DISCORD_CHANNEL_ID = "1407975317682917457"
DISCORD_USER_TOKEN = os.getenv("DISCORD_USER_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# === –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò ===
CHANNEL_ID = "-1003166042604"

# –†–∞—Å—Ç–µ–Ω–∏—è
PLANTS_RARITY = {
    "Cactus": "RARE", "Strawberry": "RARE", "Pumpkin": "EPIC", "Sunflower": "EPIC",
    "Dragon Fruit": "LEGENDARY", "Eggplant": "LEGENDARY", "Watermelon": "MYTHIC",
    "Grape": "MYTHIC", "Cocotank": "GODLY", "Carnivorous Plant": "GODLY",
    "Mr Carrot": "SECRET", "Tomatrio": "SECRET", "Shroombino": "SECRET"
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π
PLANTS_EMOJI = {
    "Cactus": "üåµ", "Strawberry": "üçì", "Pumpkin": "üéÉ", "Sunflower": "üåª",
    "Dragon Fruit": "üêâ", "Eggplant": "üçÜ", "Watermelon": "üçâ", "Grape": "üçá",
    "Cocotank": "ü••", "Carnivorous Plant": "üåø", "Mr Carrot": "ü•ï",
    "Tomatrio": "üçÖ", "Shroombino": "üçÑ"
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π
RARITY_EMOJI = {
    "RARE": "üîµ",
    "EPIC": "üü£", 
    "LEGENDARY": "üü°",
    "MYTHIC": "üî¥",
    "GODLY": "üåà",
    "SECRET": "üî≤"
}

# –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π –¥–ª—è –º–µ–Ω—é
RARITY_ORDER = ["RARE", "EPIC", "LEGENDARY", "MYTHIC", "GODLY", "SECRET"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_stock = {}
last_restock_time = None
last_message_id = None
last_stock_message_id = None  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–æ–∫–µ
user_chat_ids = set()

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "users.json"
SETTINGS_FILE = "user_settings.json"

# === TELEGRAM –ë–û–¢ ===
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
telegram_bot = telegram_app.bot

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üéØ–£–ó–ù–ê–¢–¨ –°–¢–û–öüéØ")],
        [KeyboardButton("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò")]
    ],
    resize_keyboard=True
)

# === –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    return {}

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def get_user_settings(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_settings()
    if str(user_id) not in settings:
        settings[str(user_id)] = {
            "ignored_rarities": [],
            "created_at": datetime.now().isoformat()
        }
        save_settings(settings)
    return settings[str(user_id)]

def update_user_settings(user_id, new_settings):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = load_settings()
    settings[str(user_id)] = new_settings
    save_settings(settings)

def filter_stock_by_settings(stock_data, ignored_rarities):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–æ–∫ –ø–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º —Ä–µ–¥–∫–æ—Å—Ç—è–º"""
    if not ignored_rarities:
        return stock_data
    
    filtered_stock = {}
    for plant, stock in stock_data.items():
        rarity = PLANTS_RARITY.get(plant)
        if rarity not in ignored_rarities:
            filtered_stock[plant] = stock
    
    return filtered_stock

def should_notify_user(stock_data, ignored_rarities):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not stock_data:
        return False
    
    if not ignored_rarities:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –Ω–µ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é
    for plant in stock_data.keys():
        rarity = PLANTS_RARITY.get(plant)
        if rarity not in ignored_rarities:
            return True
    
    return False

# === –í–†–ï–ú–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
temp_settings = {}

def get_temp_settings(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in temp_settings:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        current_settings = get_user_settings(user_id)
        temp_settings[user_id] = current_settings.copy()
    return temp_settings[user_id]

def save_temp_settings(user_id, new_settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    temp_settings[user_id] = new_settings

def apply_temp_settings(user_id):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ"""
    if user_id in temp_settings:
        update_user_settings(user_id, temp_settings[user_id])
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        del temp_settings[user_id]
        return True
    return False

def toggle_rarity_ignore_temp(user_id, rarity):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    user_settings = get_temp_settings(user_id)
    ignored_rarities = user_settings.get("ignored_rarities", [])
    
    if rarity in ignored_rarities:
        ignored_rarities.remove(rarity)
    else:
        ignored_rarities.append(rarity)
    
    user_settings["ignored_rarities"] = ignored_rarities
    save_temp_settings(user_id, user_settings)
    return ignored_rarities

# === –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ===
async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç)
    user_settings = get_temp_settings(user_id)
    ignored_rarities = user_settings.get("ignored_rarities", [])
    
    text = "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n\n"
    text += "üéØ *–í—ã–±–µ—Ä–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å:*\n\n"
    
    if not ignored_rarities:
        text += "üîï *–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:* –ù–µ—Ç\n\n"
    else:
        text += "üîï *–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:*\n"
        for rarity in ignored_rarities:
            emoji = RARITY_EMOJI.get(rarity, "‚ö™")
            text += f"‚îú‚îÄ {emoji} {rarity}\n"
        text += "\n"
    
    text += "üí° *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'*"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    keyboard_buttons = []
    for rarity in RARITY_ORDER:
        emoji = RARITY_EMOJI.get(rarity, "‚ö™")
        if rarity in ignored_rarities:
            button_text = f"‚úÖ {emoji} {rarity}"
        else:
            button_text = f"‚ùå {emoji} {rarity}"
        keyboard_buttons.append([InlineKeyboardButton(button_text, callback_data=f"toggle_{rarity}")])
    
    keyboard_buttons.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º", callback_data="test_filter")])
    keyboard_buttons.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_changes")])
    
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data.startswith("toggle_"):
        rarity = data.replace("toggle_", "")
        ignored_rarities = toggle_rarity_ignore_temp(user_id, rarity)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await show_settings_menu(update, context)
        
    elif data == "test_filter":
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–∫–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await test_user_filter(update, context)
        
    elif data == "confirm_changes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if apply_temp_settings(user_id):
            user_settings = get_user_settings(user_id)
            ignored_count = len(user_settings.get("ignored_rarities", []))
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            try:
                await query.message.delete()
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
                     f"üîï –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π: {ignored_count}\n\n"
                     f"–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç—è—Ö!",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

async def test_user_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    user_settings = get_temp_settings(user_id)
    ignored_rarities = user_settings.get("ignored_rarities", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
    stock_data, time_info = get_latest_stock()
    
    if stock_data:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filtered_stock = filter_stock_by_settings(stock_data, ignored_rarities)
        
        if filtered_stock:
            telegram_message = create_telegram_message(filtered_stock, time_info, is_alert=False)
            await update.callback_query.message.reply_text(
                telegram_message,
                parse_mode='Markdown'
            )
        else:
            await update.callback_query.message.reply_text(
                "üå´Ô∏è *–° —Ç–≤–æ–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —ç—Ç–æ—Ç —Å—Ç–æ–∫ –ø—É—Å—Ç!*\n\n"
                "–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —ç—Ç–æ–º —Å—Ç–æ–∫–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π.",
                parse_mode='Markdown'
            )
    else:
        await update.callback_query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫")

# === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ò–õ–¨–¢–†–ê–ú–ò ===
async def send_telegram_alert_to_all(stock_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É—á–µ—Ç–æ–º –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not user_chat_ids:
        print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    
    print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    tasks = []
    for chat_id in list(user_chat_ids):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
        user_settings = get_user_settings(chat_id)
        ignored_rarities = user_settings.get("ignored_rarities", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if should_notify_user(stock_data, ignored_rarities):
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stock = filter_stock_by_settings(stock_data, ignored_rarities)
            user_message = create_telegram_message(user_stock, last_restock_time, is_alert=True)
            
            tasks.append(send_single_message(chat_id, user_message))
        else:
            print(f"üîá –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} - –≤—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
    
    if tasks:
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        sent_count = 0
        for i, result in enumerate(results):
            chat_id = list(user_chat_ids)[i]
            if isinstance(result, Exception):
                user_chat_ids.discard(chat_id)
            else:
                sent_count += 1
        
        save_users()
        print(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("üîá –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("üéØ –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    processing_msg = await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∫...")
    
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        await processing_msg.delete()
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    add_user(update.message.chat_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
    user_settings = get_user_settings(user_id)
    ignored_rarities = user_settings.get("ignored_rarities", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–æ–∫
    stock_data, time_info = get_latest_stock()
    
    if stock_data:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        filtered_stock = filter_stock_by_settings(stock_data, ignored_rarities)
        
        if filtered_stock:
            telegram_message = create_telegram_message(filtered_stock, time_info, is_alert=False)
            await processing_msg.delete()
            await update.message.reply_text(
                telegram_message, 
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–∫")
        else:
            await processing_msg.delete()
            await update.message.reply_text(
                "üå´Ô∏è *–û–π, –∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ!*\n\n"
                "–í —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–∫–µ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å.\n\n"
                "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
    else:
        await processing_msg.delete()
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫", reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    add_user(update.message.chat_id)
    
    if update.message.text == "üéØ–£–ó–ù–ê–¢–¨ –°–¢–û–öüéØ":
        await handle_button_click(update, context)
    elif update.message.text == "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò":
        await show_settings_menu(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üéØ", reply_markup=keyboard)

# === –§–ò–ö–° –î–õ–Ø ASYNCIO ===
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    error_msg = str(context.error)
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ event loop —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
    if "event loop" in error_msg.lower() or "runtimeerror" in error_msg.lower():
        return
    print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

# === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –°–¢–û–ö–ê ===
def get_latest_stock():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–æ–∫ (–∏—â–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    global current_stock, last_restock_time, last_stock_message_id
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫ –≤ –ø–∞–º—è—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if current_stock and last_restock_time:
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–∫ –∏–∑ –ø–∞–º—è—Ç–∏")
        return current_stock, last_restock_time
    
    # –ò–Ω–∞—á–µ –∏—â–µ–º —Å—Ç–æ–∫ –≤ Discord
    print("üîç –ò—â–µ–º —Å—Ç–æ–∫ –≤ Discord...")
    messages = get_discord_messages(limit=10)  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    
    for message in messages:
        embeds = message.get('embeds', [])
        for embed in embeds:
            if embed.get('title') == 'SEEDS SHOP RESTOCK!':
                message_timestamp = message.get('timestamp')
                stock_data, time_info = extract_stock_info_from_embed(embed, message_timestamp)
                
                if stock_data:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {list(stock_data.keys())}")
                    current_stock = stock_data
                    last_restock_time = time_info
                    last_stock_message_id = message['id']
                    return stock_data, time_info
    
    print("‚ùå –°—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
    return None, None

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
def monitor_discord():
    global current_stock, last_restock_time, last_message_id, last_stock_message_id
    
    print("üïµÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª–∞...")
    
    initial_message = get_latest_discord_message()
    if initial_message:
        last_message_id = initial_message['id']
        print(f"üìù –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message_id}")
    
    while True:
        try:
            message = get_latest_discord_message()
            
            if message:
                current_message_id = message['id']
                
                if current_message_id != last_message_id:
                    print(f"üÜï –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {current_message_id}")
                    last_message_id = current_message_id
                    
                    embeds = message.get('embeds', [])
                    stock_found = False
                    
                    for embed in embeds:
                        if embed.get('title') == 'SEEDS SHOP RESTOCK!':
                            print("üéØ –ù–ê–ô–î–ï–ù –°–¢–û–ö –í EMBED!")
                            stock_found = True
                            
                            message_timestamp = message.get('timestamp')
                            stock_data, time_info = extract_stock_info_from_embed(embed, message_timestamp)
                            
                            if stock_data:
                                print(f"üìä –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –°–¢–û–ö! –†–∞—Å—Ç–µ–Ω–∏—è: {list(stock_data.keys())}")
                                
                                current_stock = stock_data
                                last_restock_time = time_info
                                last_stock_message_id = current_message_id
                                
                                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                threading.Thread(
                                    target=lambda: asyncio.run(send_telegram_alert_to_all(stock_data)),
                                    daemon=True
                                ).start()
                            break
                    
                    if not stock_found:
                        print("üì≠ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ —Å—Ç–æ–∫–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            
            time.sleep(10)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò ===
async def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    max_retries = 2
    for attempt in range(max_retries):
        try:
            member = await telegram_bot.get_chat_member(CHANNEL_ID, user_id)
            if member.status in ['member', 'administrator', 'creator']:
                return True
            else:
                return False
        except Exception as e:
            error_msg = str(e)
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ event loop, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            if "event loop" in error_msg.lower() or "runtimeerror" in error_msg.lower():
                if attempt < max_retries - 1:
                    await asyncio.sleep(0.5)
                    continue
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return True
    return True

def create_subscription_message():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = """
üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–æ–∫—É –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª

üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å—Ç–æ–∫–µ
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/PlantsVersusBrainrotsSTOCK")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])
    
    return text, keyboard

async def handle_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if is_subscribed:
        try:
            await query.message.delete()
        except:
            pass
        
        add_user(user_id)
        await show_current_stock(user_id, context)
    else:
        text, reply_markup = create_subscription_message()
        await query.edit_message_text(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n" + text,
            reply_markup=reply_markup
        )

async def show_current_stock(user_id, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    stock_data, time_info = get_latest_stock()
    
    if stock_data:
        telegram_message = create_telegram_message(stock_data, time_info, is_alert=False)
        await context.bot.send_message(
            chat_id=user_id,
            text=telegram_message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫",
            reply_markup=keyboard
        )

def load_users():
    global user_chat_ids
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r') as f:
                data = json.load(f)
                user_chat_ids = set(data.get('users', []))
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except:
        user_chat_ids = set()
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def save_users():
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump({'users': list(user_chat_ids)}, f)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def add_user(chat_id):
    if chat_id not in user_chat_ids:
        user_chat_ids.add(chat_id)
        save_users()
        print(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

def get_latest_discord_message():
    headers = {
        'Authorization': DISCORD_USER_TOKEN,
        'Content-Type': 'application/json',
    }
    
    url = f'https://discord.com/api/v9/channels/{DISCORD_CHANNEL_ID}/messages?limit=1'
    
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            messages = response.json()
            if messages:
                return messages[0]
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord: {e}")
        return None

def get_discord_messages(limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Discord"""
    headers = {
        'Authorization': DISCORD_USER_TOKEN,
        'Content-Type': 'application/json',
    }
    
    url = f'https://discord.com/api/v9/channels/{DISCORD_CHANNEL_ID}/messages?limit={limit}'
    
    try:
        response = requests.get(url, headers=headers, timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord: {e}")
        return []

def convert_to_msk(discord_time_str):
    try:
        if "@" in discord_time_str:
            date_part, time_part = discord_time_str.split('@')
            day, month, year = date_part.strip().split('/')
            hour, minute = time_part.strip().replace('GMT', '').strip().split(':')
            
            dt_utc = datetime(int(year), int(month), int(day), int(hour), int(minute))
            dt_msk = dt_utc + timedelta(hours=3)
            return dt_msk.strftime("%d/%m/%Y %H:%M")
        else:
            return discord_time_str
    except:
        return discord_time_str

def extract_stock_info_from_embed(embed, message_timestamp):
    stock_data = {}
    current_time = ""
    
    author = embed.get('author', {})
    if author and 'name' in author:
        author_name = author['name']
        if "‚è≥" in author_name:
            discord_time = author_name.replace('‚è≥', '').strip()
            current_time = convert_to_msk(discord_time)
            print(f"‚è∞ –í—Ä–µ–º—è –∏–∑ Discord: {discord_time} -> –ú–°–ö: {current_time}")
    
    if not current_time:
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M")
        print(f"‚è∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {current_time}")
    
    fields = embed.get('fields', [])
    for field in fields:
        plant_name = field.get('name', '')
        plant_value = field.get('value', '')
        
        clean_plant_name = re.sub(r'[^\w\s]', '', plant_name).strip()
        
        stock_match = re.search(r'\+\d+', plant_value)
        if stock_match:
            stock_count = int(stock_match.group(0).replace('+', ''))
            
            for known_plant in PLANTS_RARITY.keys():
                if known_plant.lower() in clean_plant_name.lower():
                    stock_data[known_plant] = stock_count
                    print(f"‚úÖ {known_plant}: {stock_count} —à—Ç")
                    break
    
    return stock_data, current_time

def create_telegram_message(stock_data, time_info, is_alert=False):
    if not stock_data:
        return "üì≠ –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ"
    
    if is_alert:
        message_text = "üî• **–ù–û–í–´–ô –°–¢–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!** üî•\n\n"
    else:
        message_text = "‚òîÔ∏è **–ê–ö–¢–£–ê–õ–¨–ù–´–ô –°–¢–û–ö** ‚òîÔ∏è\n\n"
    
    message_text += f"‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_info} –ú–°–ö*\n\n"
    message_text += "üéØ **–î–û–°–¢–£–ü–ù–´–ï –†–ê–°–¢–ï–ù–ò–Ø:**\n\n"
    
    rarity_groups = {}
    for plant, stock in stock_data.items():
        rarity = PLANTS_RARITY.get(plant)
        if rarity not in rarity_groups:
            rarity_groups[rarity] = []
        rarity_groups[rarity].append((plant, stock))
    
    rarity_order = ["RARE", "EPIC", "LEGENDARY", "MYTHIC", "GODLY", "SECRET"]
    
    for rarity in rarity_order:
        if rarity in rarity_groups and rarity_groups[rarity]:
            emoji = RARITY_EMOJI.get(rarity, "üåü")
            message_text += f"{emoji} **{rarity}**\n"
            for plant, stock in rarity_groups[rarity]:
                plant_emoji = PLANTS_EMOJI.get(plant, "üå±")
                message_text += f"‚îú‚îÄ {plant_emoji} {plant} √ó{stock}\n"
            message_text += "\n"
    
    message_text += "‚ö° –£—Å–ø–µ–π –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!\n\n"
    message_text += "üì¢ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:*\n"
    message_text += "üëâ –ö–∞–Ω–∞–ª: @PlantsVersusBrainrotsSTOCK\n"
    message_text += "üí¨ –ß–∞—Ç: @PlantsVersusBrainrotSTOCKCHAT"
    
    return message_text

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò ===
async def send_single_message(chat_id, message):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        await telegram_bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown'
        )
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False

async def admin_broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ALL <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message_text = " ".join(context.args)
    broadcast_message = f"üì¢ **–û–ë–™–Ø–í–õ–ï–ù–ò–ï:**\n\n{message_text}"
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(user_chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    tasks = []
    for chat_id in list(user_chat_ids):
        tasks.append(send_broadcast_message(context, chat_id, broadcast_message))
    
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    sent_count = sum(1 for r in results if not isinstance(r, Exception))
    error_count = len(results) - sent_count
    
    await update.message.reply_text(
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}"
    )

async def send_broadcast_message(context, chat_id, message):
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown'
        )
        return True
    except:
        return False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(user_id)
    
    if not is_subscribed:
        text, reply_markup = create_subscription_message()
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" + text,
            reply_markup=reply_markup
        )
        return
    
    add_user(update.message.chat_id)
    
    welcome_text = """
ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∫–∞ Plants Vs Brainrots

üéØ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
üì¢ –ö–∞–Ω–∞–ª: @PlantsVersusBrainrotsSTOCK
üí¨ –ß–∞—Ç: @PlantsVersusBrainrotSTOCKCHAT
    """
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

def run_telegram_bot():
    print("üì± –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(CommandHandler("all", admin_broadcast_command))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    telegram_app.add_handler(CallbackQueryHandler(handle_subscription_check, pattern="check_subscription"))
    telegram_app.add_handler(CallbackQueryHandler(handle_settings_callback, pattern="^(toggle_|test_filter|confirm_changes)"))
    telegram_app.add_error_handler(error_handler)
    telegram_app.run_polling()

def main():
    print("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê PLANTS VS BRAINROTS!")
    print("=" * 50)
    print("ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π")
    print("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º")
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª–∞")
    print("üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å—Ç–æ–∫–µ")
    print("=" * 50)
    
    load_users()
    
    print("üåÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Discord...")
    discord_thread = threading.Thread(target=monitor_discord, daemon=True)
    discord_thread.start()
    
    print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´! –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢!")
    print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    run_telegram_bot()

if __name__ == "__main__":
    main()